var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Solvespace', 'text': '', 'tags': '', 'url': 'Solvespace.html'}, {'title': '編譯', 'text': '編譯步驟: \n 先將 Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe \n git version  查驗 git 版本 \n git clone\xa0 https: //github.com/solvespace/solvespace.git \xa0 \n cd solvespace  回solvespace原始碼目錄 \n git submodule init \n git submodule update \n edit Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt comment out line 713 and 714 \n #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() \n 接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\\mingw64\\lib 目錄) \n cd solvespace \n cd extlib \n cd libpng \n mkdir build \n cd build \n 接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行: \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 編譯完成後, 可以在 build\\bin 目錄中建立 solvespace.exe, 配合相關 dll 檔案後, 即可執行. \n 40723102操作影片: \n', 'tags': '', 'url': '編譯.html'}, {'title': '操作', 'text': 'W  : 擺正視圖\xa0 \xa0  F  : 放大試圖 \n H  : 水平放置\xa0 \xa0  \xa0V  : 垂直放置\xa0 \xa0  O  : 重合\xa0 \xa0  M  : 中點\xa0 \xa0  D  : 尺寸標註 \n 40723102操作影片: \n', 'tags': '', 'url': '操作.html'}, {'title': '雙輪車控制模擬', 'text': '', 'tags': '', 'url': '雙輪車控制模擬.html'}, {'title': '期中考前', 'text': '', 'tags': '', 'url': '期中考前.html'}, {'title': 'week7', 'text': '在About中加入 This is compiled by 40723102 \n 至隨身碟40723102>201906_fall>data>solvespace>src \n 找到 solvespace.cpp 檔 \n \n 用文字編輯器編輯 \n \n 完成後再編輯solvespace一次 \n cd solvespace \n cd extlib \n cd libpng \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make', 'tags': '', 'url': 'week7.html'}, {'title': 'week8', 'text': 'Solvespace 繪圖驗證1 \n \n Solvespace 繪圖驗證2 \n \n', 'tags': '', 'url': 'week8.html'}, {'title': 'week9', 'text': '期中報告影片 \n \n', 'tags': '', 'url': 'week9.html'}, {'title': '期中考後', 'text': '', 'tags': '', 'url': '期中考後.html'}, {'title': 'week15', 'text': 'https://youtu.be/Nrn4rwxURxU \n', 'tags': '', 'url': 'week15.html'}, {'title': 'week16', 'text': 'https://youtu.be/yPrNbR-sWNs \n', 'tags': '', 'url': 'week16.html'}, {'title': 'week17', 'text': "http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm \n 心得:時間分配不均只有翻譯 。期末考週加油! \n 第四段型號定義 \n 現在我們準備定義模型了。我們首先構建模型層次結構：我們附加了最後一個動態機器人鏈接\xa0( robot_link_dyn6 ) ，到其對應的關節( robot_joint6 )\xa0，選擇 \xa0( robot_link_dyn6 ) 然後控制選擇 ( robot_joint6 )\xa0, 之後然後點擊 [ 菜單欄 -> 編輯 -> 將最後選擇的對象設為主對象 ] 。 \n 我們也可以藉由簡單地將對象 robot_link_dyn6 拖動到場景層次中的 robot_link6 上完成此步驟。 \n 現在，我們將 robot_joint6 附加到 robot_link_dyn5 上，依此類推，直到到達機器人的底部。 \n 現在，我們具有以下場景層次結構： \n \xa0 \n 為模型起一個簡單的名字是很好而且更合乎邏輯的，因為模型庫也將代表模型本身。所以我們命名這個機械手臂為 robot_visibleBase ,  robot_dyn 。 \n 現在我們選擇層次樹的基礎(i.e. object\xa0 robot )，在對象的公共屬性中，我們啟用物體是模型 \n 我們還使物體 / 模型可以轉移或接受 DNA 。 \n \xa0 \n 不顯示為內部模型 \n 模型邊界框可以包含整個機器人。但是如果邊界框太大，邊界框還包含不可見的項目 ( 例如 : 節點 )  。這時候可以對所有節點啟用“不顯示為內部模型”  Don't show as inside model selection 選擇項，將節點從模型邊界框中排除。我們可以對模型中的所有不可見項執行上述的步驟。這也是一個有用的選項，可以將大型傳感器或其他項目也排除在模型邊界框之外。 \n \xa0 \n 避免模型遭意外修改 \n 保護我們的模型遭意外修改，選擇機器人中所有可見的對象，然後啟用 “\xa0 選擇模型的基礎 ”   Select base of model instead ：如果現在點擊場景中的可見鏈接，則會改為選擇機器人的基座。這時候我們可以像對待單個物體一樣操作模型。我們仍然可以通過按住 Shift 鍵並單擊場景來選擇機器人中的可見物件，或在場景層次結構中選擇物件。 \n 我們將機器人置於正確的默認位置 / 方向。首先，我們將當前場景儲存做為參考（例如，需要在當前機器人上導入具有相同方向的 CAD 數據）。 \n 然後我們選擇模型並適當修改其位置 / 方向 \n 養成習慣將模型（即其基礎對象）放置在 X = 0 和 Y = 0 處。 \n \n 模擬 \n 現在我們進行模擬，由於默認情況下節點不受控制，因此機器人將崩壞。 \n 在第三段添加節點時，我們以力 / 扭矩模式創建了節點，但其馬達或控制器已禁用情況下（默認情況下）。可以根據需要調整關節，在我們的案例中，我們希望為每個控制器都提供一個簡單的 PID 控制器。在關節動態屬性中，單擊“啟用電機”並調整最大扭矩。然後，單擊啟用控制環\xa0 Control loop enabled \xa0，然後選擇位置控制（ PID ） Position control (PID) 。 \n 我們再次模擬，則機器人應保持其位置 \n 嘗試切換當前的物理引擎，以查看行為在所有受支持的物理引擎之間是否一致。您可以通過相應的工具欄按鈕\xa0toolbar button,或在常規動力學屬性中\xa0general dynamics properties執行此操作。在模擬過程我們通過“\xa0Dynamic content visualization、 verification toolbar button. ”工具欄按鈕來驗證場景動態內容。現在，將僅顯示物理引擎考慮的項目，並且該使用顏色區分。 \n 此操作非常重要，尤其是在動態模型無法按預期運行時，為了快速調整模型。同樣，在模擬過程中請始終注意場景層次：動態啟用的對象應在其名稱的右側顯示一個球形圖示。 \n \n 最後，我們需要準備機器人，以便我們可以輕鬆地將抓取器連接到它，或輕鬆地將機器人連接到移動平台。可以透過以下兩種不同的方式 \n 1. by grouping them 將它們分組；選擇形狀 然後 \n [Menu bar 菜單欄  --> Edit 編輯 -  --> Grouping/Merging 分組 / 合併  --> Group selected shapes 對選定形狀進行分組 ]. \n 2.by attaching them via a force/torque sensor( 通過力 / 扭矩傳感器連接它們 ) : 力扭矩傳感器還可以兩個單獨的動態啟用形狀之間的剛性鏈接。 \n 只有選項 2 是有意義的。我們建一個力 / 扭矩傳感器\xa0[Menu bar菜單欄 --> Add 添加 - --> Force sensor力傳感器]，然後將其移動到機器人的尖端，然後將其附加到對象 robot_link_dyn6 。我們會適當地更改其尺寸和外觀（紅色力 / 扭矩傳感器通常被視為可選的連接點，請檢查可用的各種機器人型號）。我們將其名稱更改為 robot_attachment ： \n \n 現在，我們將手臂夾持器模型拖拉到場景中，使其保持選中狀態，然後按住 Control 鍵並點擊附著力傳感器，然後點擊“\xa0Assembling裝配/disassembling拆卸 ”工具欄按鈕。 \n 夾持器到位： \n \n 夾持器會自己連結，因為它在模型定義期間進行了適當的配置。 \n 現在，我們還需要正確配置機器人模型，以便它將知道如何將自己加到移動基座上。我們選擇機器人模型，然後在對象公共屬性中 ( \xa0object common properties)點擊“組裝”。為“ Parent 主 項”配置一個空字串，然後點擊設置 模型，這將記住當前基礎對象的局部轉換模型，並使用它相對於移動機器人的附著點定位 / 定向。 \n \xa0 \n 為了驗證我們做的正確，我們拖動模型 Models/robots/mobile/KUKA Omnirob.ttm 進來，然後，我們選擇機器人模型，然後在移動平台上按住 Control 鍵並點擊其中一個附接點，然後單擊“組裝 Assembling/ 拆卸 disassemblin ”工具欄按鈕。我們的機器人應該正確地將自己放置在移動機器人的頂部： \n \xa0 \n 現在，我們可以向機器人添加其他項目，例如傳感器。 \n 在某些時候，我們可能還希望將嵌入式腳本附加到我們的模型中，以便控制其行為或出於各種目的對其進行配置。在這種情況下，一定要了解項目如何從嵌入的腳本查看。我們還可以從\xa0 plugin 、\xa0 remote API \xa0client、 from a\xa0 ROS \xa0node、 \xa0 BlueZero \xa0node、 add-on ，control控制 /access 訪問 /interface 模型。確保我們已還原在機械手和夾具的安裝過程中所做的更改， 我們折疊機器人模型的層次樹，選擇模型的基礎，然後使用 [ 菜單欄 Menu bar-> 文件 File-> 將模型另存為 Save model as] 保存。 \n", 'tags': '', 'url': 'week17.html'}, {'title': 'NX簡介', 'text': 'NX歷史 \n \xa0 NX源自於美國麥道航太公司，近30年的資深CAD / CAM / CAE系統，再加上西門子在系統與設備，工程上的經驗與能力提供在加工與產品開發設計上更多的資源與整合。 \n 在CAM加工上智慧模型（MasterModel）的概念，至少包含3DCAD模型，與NC路徑的完整關聯性，並替換數據大小以及刀具路徑的管理，在高速切銷加工上提供穩定可靠與加工品質，同時針對複合銑削加工的領域提供完整的解決方案。 \n NX優點 \xa0 NX讓客戶增加新產品數量，減少30％以上的開發時間，縮短70％以上的設計分析重複作業，並減少高達90％的電腦數控（CNC）編程時間。 \n CAD \xa0• 從零件設計資料輸入開始，通常是3D CAD模型，某些情況下也可能是2D圖面。通常會需要用到3D CAD軟體以準備或調整零件設計模型，進行後續的NC編程操作。 \n CAM \xa0• NX CAM包含NC編程，後處理及工具機模擬。 \xa0• 功能完備的套件Siemens是進階工具機控制器技術及驅動設備領域的公認領導廠商。 \n NX CAD / CAM一體化的優勢 \xa0• 3D零件建模準備NX最新的CAD技術能夠NC程序設計師迅速準備零件模型，包括協力廠商的CAD模型。只要利用同步建模技術，就可以直接編輯零件模型，準備讓零件進入NC編程。 \n \xa0• NX提供一組專門的CAD功能，讓NC程序設計師能夠在建立NC操作之前快速進行分析。 \n \xa0•\xa0 建模，組立件與製圖-NX提供了當今市場上最強大的CAD功能組合。這些功能已替換NX CAM之中，且有需要的NC程序設計師使用建立零件，坯件形狀，夾治具或工具機模型以進行模擬 。 \n', 'tags': '', 'url': 'NX簡介.html'}, {'title': 'CH3', 'text': '在本章中，將學習如何在NX 12中創建和編輯草圖。 3.1概述 繪製完成，可以使用多種方法来生成3D零件： \n \n 旋轉草圖 \n 拉伸草圖 \n 草圖沿参考線进行掃掠 \n \n 3.2素描環境 在NX 12中，可以使用 兩種方法創建草圖在當前環境與應用 : 1.➢ Choose Menu →Insert 插入→Sketch草圖 2.➢ Choose Sketch in Home toolbar(直接在主工具欄中選擇草圖) 3.➢ Choose the XC-YC plane and click OK(選擇XC-YC平面並點確定) 4.➢ Click the More option in the direct sketch tool bar area(直接點擊草圖工具欄區域中的更多選項) 5.➢ Click on Open in Sketch Task Environment as shown below \n 3.3草圖曲線工具欄 包含用於創建常用類型的圖示 曲線和编辑，修剪，圆角、弧、圓等 \n 3.4約束工具欄 尺寸約束 可以通過給尺寸賦予固定實體（例如軸，平面，坐標系或模型中創建的任何現有實體幾何形狀）來消除自由度。這些尺寸可以是線性，徑向，角度等。可以在草繪過程中隨時通過雙擊尺寸來編輯尺寸值。 \n 幾何約束 除了尺寸約束之外，還可以提供一些幾何約束以消除自由度。它們包括平行的，垂直的，共線的，同心的，水平的，垂直的，等長的，等等。該軟件能夠為所選實體找到可能的約束集。例如，在下圖中的線上施加一個約束，使其平行於矩形的左側（該線最初與矩形成一定角度）。 \n 顯示草圖約束 單擊此圖標將以白色顯示與該特定草圖中的實體相關的所有選項。 \n 顯示/刪除約束 該窗口列出了與所選任何實體相關的所有約束和約束類型。可以刪除任何列出的約束或更改約束的順序。 狀態行中顯示不受約束的自由度數。所有這些都應通過應用約束來遵循嚴格的模型來刪除。 \n 3.5範例40723102操作影片 \n \n', 'tags': '', 'url': 'CH3.html'}]};